/**
 * @file Firestore Security Rules for VentaPro Application
 * @description This ruleset enforces a strict ownership model for customer data and their associated sales orders and sales order items. Products are publicly readable but not writable.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product catalog.
 * - /customers/{customerId}: Customer profiles, only accessible by the customer themselves.
 * - /customers/{customerId}/sales_orders/{salesOrderId}: Sales orders belonging to a specific customer.
 * - /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId}: Items within a sales order.
 *
 * Key Security Decisions:
 * - Products are publicly readable to allow for easy catalog access.  Writes are disabled to protect product data.
 * - Customers can only access their own data and sales orders.
 * - No listing of all customers is allowed to prevent unauthorized data access.
 * - Relational integrity is enforced to ensure that sales orders and sales order items are associated with the correct customer.
 *
 * Denormalization for Authorization:
 * - The customerId is present in both the sales_orders and sales_order_items subcollections, allowing for path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts creation, updates, and deletion.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, no writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a customer to read and write their own customer profile.
     * @path /customers/{customerId}
     * @allow (get): if isSignedIn() && isOwner(customerId)
     * @allow (create): if isSignedIn() && isOwner(customerId)
     * @allow (update, delete): if isSignedIn() && isExistingOwner(customerId)
     * @deny (get): if !isSignedIn() || !isOwner(customerId)
     * @deny (create): if !isSignedIn() || !isOwner(customerId)
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(customerId)
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isSignedIn() && isExistingOwner(customerId);
      allow delete: if isSignedIn() && isExistingOwner(customerId);
    }

    /**
     * @description Allows a customer to manage their own sales orders.
     * @path /customers/{customerId}/sales_orders/{salesOrderId}
     * @allow (get, list): if isSignedIn() && isOwner(customerId)
     * @allow (create): if isSignedIn() && isOwner(customerId)
     * @allow (update, delete): if isSignedIn() && isExistingOwner(customerId)
     * @deny (get, list): if !isSignedIn() || !isOwner(customerId)
     * @deny (create): if !isSignedIn() || !isOwner(customerId)
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(customerId)
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId}/sales_orders/{salesOrderId} {
      allow get, list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isSignedIn() && isExistingOwner(customerId);
      allow delete: if isSignedIn() && isExistingOwner(customerId);
    }

    /**
     * @description Allows a customer to manage sales order items within their sales orders.
     * @path /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId}
     * @allow (get, list): if isSignedIn() && isOwner(customerId)
     * @allow (create): if isSignedIn() && isOwner(customerId)
     * @allow (update, delete): if isSignedIn() && isExistingOwner(customerId)
     * @deny (get, list): if !isSignedIn() || !isOwner(customerId)
     * @deny (create): if !isSignedIn() || !isOwner(customerId)
     * @deny (update, delete): if !isSignedIn() || !isExistingOwner(customerId)
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId} {
      allow get, list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isSignedIn() && isExistingOwner(customerId);
      allow delete: if isSignedIn() && isExistingOwner(customerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}