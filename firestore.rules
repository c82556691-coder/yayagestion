/**
 * @file Firestore Security Rules for VentaPro Application
 * @version Prototyping
 *
 * @description This ruleset enforces a strict user-ownership model for customer data and their associated sales orders.
 *  Product data is publicly readable.
 *
 * @dataStructure
 * - /products/{productId}: Publicly readable product catalog.
 * - /customers/{customerId}: Customer profiles, accessible only by the customer themselves.
 * - /customers/{customerId}/sales_orders/{salesOrderId}: Sales orders belonging to a specific customer, accessible only by that customer.
 * - /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId}: Items within a sales order, accessible only by the owning customer.
 *
 * @keySecurityDecisions
 * - Products are publicly readable to allow for easy catalog browsing.
 * - Customers can only access their own data and sales orders.
 * - No listing of customers is allowed to prevent data leakage.
 *
 * @denormalizationForAuthorization
 * - Sales orders are nested under customers to enforce ownership via path-based rules.
 *
 * @structuralSegregation
 * - Public product data is stored in a top-level collection, separate from private customer data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but restricts creation, updates, and deletion to be implemented later by admins.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @deny (create, update, delete): Always, as these operations are not permitted in the current configuration.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a customer to read, update, and delete their own profile. Only the customer can create their profile.
     * @path /customers/{customerId}
     * @allow (get, update, delete): if isSignedIn() && isOwner(customerId);
     * @allow (create): if isSignedIn() && isOwner(customerId);
     * @deny (get, update, delete): if isSignedIn() && !isOwner(customerId);
     * @deny (create): if !isSignedIn() || request.auth.uid != customerId;
     * @deny (list): Always, as customer listing is not permitted.
     * @principle Enforces document ownership for customer profiles.
     */
    match /customers/{customerId} {
      allow get, update, delete: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow list: if false;
    }

    /**
     * @description Allows a customer to manage their own sales orders. Only the customer can create, read, update, and delete orders under their ID.
     * @path /customers/{customerId}/sales_orders/{salesOrderId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(customerId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(customerId);
     * @principle Enforces document ownership for sales orders.
     */
    match /customers/{customerId}/sales_orders/{salesOrderId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(customerId);
    }

    /**
     * @description Allows a customer to manage their own sales order items. Only the customer can create, read, update, and delete items under their sales order ID.
     * @path /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isOwner(customerId);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isOwner(customerId);
     * @principle Enforces document ownership for sales order items.
     */
    match /customers/{customerId}/sales_orders/{salesOrderId}/sales_order_items/{salesOrderItemId} {
      allow get, list, create, update, delete: if isSignedIn() && isOwner(customerId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}